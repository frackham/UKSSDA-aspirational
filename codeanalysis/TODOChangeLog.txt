
2012-11-25 22:54:57.251000
+ t.py
+ - #TODO: Change name of function, incorrect!
+ ects.py
+  #TODO: NEXT STEP: How to put in the school? What is the key for? How to retrieve?
+ tml
+  <!-- TODO: POPULATE in Jinja2  ... (for item in userNavItems) -->
+ - <div id="developerlinks"> <!-- TODO: Hide in dev mode -->
+ py
+ #TODO: Check status of unit test strut here?
+  #TODO: Add owner, referenceURI, prerequisites[],
+  #TODO: Prerequisite metrics.
+ a.py
+ #TODO: Replace these strings with values loaded from textfiles on module start (system object? onload of admin console, load these to system.object).
+ lysis.py
+ # TODO: [d]see page 8 of python data vis.
+ # TODO: [e]Write file size metrics.
+ # TODO: [e]Write file created metrics.
+ # TODO: [e]Write file updated metrics.
+ # TODO: [d]Write class count metrics.
+ # TODO: [d]Write function count metrics.
+ # TODO: [d]Write class list of file.
+ # TODO: [d]Write function list of file.
+  # TODO: [e]match unit test files to class files, and count tests. also get functions/properties without tests.
+  # TODO: [i]Get functions/classes that do not have docstrings.
+  # TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)
+  # TODO: [i] Assume idealistic if no tag.
+  # TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)
+  # TODO: [d] Check for 'conflicted copy' in title of file, and write as a system level bug with list of conflicted versions. [i] Get a diff of changes.
+  # TODO: [i] Decide how to handle multitagged TODOs (currently counts against all?).
+  # TODO: [d] Include results of unit tests (perhaps last unit test run outputs a text file and this reads that, rather than run unit test suite?).
+  # TODO: [i] Use http://docs.python.org/library/timeit.html#module-timeit to time how long unit tests take/how long it takes to import modules.
+  COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.
+  LOCATIONSTAMP = "" #TODO: [i] Add location stamp (using what library?).
+  #TODO: Add exception here for sLine that doesn't meet LoC matching pattern. What about docstrings, as currently flagged as code?
+ - #TODO: [e]IMPORT here.
+ - #(24) Other tagging: [other] #TODO: [d] append tag to list of additional tags. Means can get a list of specific todo related to [unittests], for example.
+ - print (" TODO Items:           " + str(todoCount))
+ - #TODO: [i]For each 'other' tag item, print count?
+ - #TODO: [d]Display other tag list.
+ - print (" TODO ITEMS as of " + str(DATESTAMP))
+ - #if line.strip()[0:2] == "..": #TODO: [d]change to option of true/false of showing only file and not path breaks this.
+ - print (line), #TODO: [i]Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i]Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i]Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i]Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i]Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - #TODO: [d]Check against http://stackoverflow.com/questions/2666863/list-to-csv-in-python
+ - #HACK: This works, but it means that we can't see where the TODO came from.
+ - #TODO: [d] Remove all these debug strings.
+ - #TODO: [i] Add call to PDF write here. Would like colour coding for categories (e.g replace [c] with RED [c]).
+ - #TODO: [i] I only needed to duplicate handleResults because it wasn't broken down enough. Refactor these.
+ - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
+ - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
+ - #TODO: Change the path addition to only append if not already in path?
+ - fileIgnoreList = [""] #TODO: ignore codeanalysis.py &    imported non-project files (Add at later date. This file should be done fairly early in project (before lit review finished)).
+ - #TODO: [e]Write to PDF.


2012-11-25 22:56:31.263000


2012-11-25 22:57:47.576000
+ - #TODO: [i] Fix HMTL render.


2012-11-25 23:00:51.767000


2012-11-25 23:01:32.845000


2012-11-26 20:55:50.329000


2012-11-26 20:57:41.027000
+  #TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).


2012-11-26 21:02:22.804000
+ #TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses
+  #TODO: [i] Use ReferenceProperty for one to many relationship. https://developers.google.com/appengine/articles/modeling
+  #TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.
+  #TODO: [e] add attendance, classes (arr)
+  #TODO: [e] add summary assessment values for proof.
+  #TODO: [d] add proper assessment.
+  #TODO: [d] add other attendance values.
+  #TODO: [e] add classes (arr)
-  #TODO: NEXT STEP: How to put in the school? What is the key for? How to retrieve?
+  #TODO: [i] NEXT STEP: How to put in the school? What is the key for? How to retrieve?


2012-11-28 20:06:35.263000
+ l
+ - <!-- #TODO: [d] Update 404 -->
- #TODO: Check status of unit test strut here?
+  #TODO: [e] Check status of unit test strut here?
+  self.version = "alpha" #TODO: [d] Get version number here.
+  self.passedUnitTests = False #TODO: [d] Get version number here.
-  #TODO: Add owner, referenceURI, prerequisites[],
+  #TODO: [c] Add owner, referenceURI, prerequisites[], (more next lines-->)
-  #TODO: Prerequisite metrics.
+  #TODO: [e] Prerequisite metrics.
- # TODO: [d]see page 8 of python data vis.
+ # TODO: [d] see page 8 of python data vis.
- # TODO: [e]Write file size metrics.
+ # TODO: [e] Write file size metrics.
- # TODO: [e]Write file created metrics.
+ # TODO: [e] Write file created metrics.
- # TODO: [e]Write file updated metrics.
+ # TODO: [e] Write file updated metrics.
- # TODO: [d]Write class count metrics.
+ # TODO: [d] Write class count metrics.
- # TODO: [d]Write function count metrics.
+ # TODO: [d] Write function count metrics.
- # TODO: [d]Write class list of file.
+ # TODO: [d] Write class list of file.
- # TODO: [d]Write function list of file.
+ # TODO: [d] Write function list of file.
-  # TODO: [e]match unit test files to class files, and count tests. also get functions/properties without tests.
+  # TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.
-  # TODO: [i]Get functions/classes that do not have docstrings.
+  # TODO: [i] Get functions/classes that do not have docstrings.
-  #TODO: Add exception here for sLine that doesn't meet LoC matching pattern. What about docstrings, as currently flagged as code?
+  #TODO: [i] Add exception here for sLine that doesn't meet LoC matching pattern. What about docstrings, as currently flagged as code?
- - #TODO: [e]IMPORT here.
+ - #TODO: [e] IMPORT here.
- - #TODO: [i]For each 'other' tag item, print count?
+ - #TODO: [i] For each 'other' tag item, print count?
- - #TODO: [d]Display other tag list.
+ - #TODO: [d] Display other tag list.
- - #if line.strip()[0:2] == "..": #TODO: [d]change to option of true/false of showing only file and not path breaks this.
+ - #if line.strip()[0:2] == "..": #TODO: [d] change to option of true/false of showing only file and not path breaks this.
- - print (line), #TODO: [i]Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (line), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i]Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i]Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i]Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i]Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ it.py
+ #TODO: [c] Make executable.
+ #TODO: [e] Run codeanalysis.
+ #TODO: [i] Probably move codeanalysis in here.
+ oy.py
+ #TODO: [c] Make executable.
+ #TODO: [e] Load test strut and check unit tests.
+ #TODO: [e] Run code analysis.
+ #TODO: [i] Make change to app.yaml?
+ #TODO: [e] Make local backup.
+ #TODO: [i] Explore some performance testing. Possible to use http://jspro.com/apis/profiling-page-loads-with-the-navigation-timing-api/ OR http://jspro.com/apis/discovering-the-high-resolution-time-api/ ? Would need to do postdeploy, probably.


2012-11-28 20:08:23.069000


2012-11-28 20:09:34.721000


2012-11-28 20:10:32.790000


2012-11-28 20:12:06.389000


2012-11-28 20:19:35.589000


2012-11-28 20:25:23.753000


2012-11-28 20:28:18.429000
+ lysis.html
+ <!DOCTYPE html><html><head> <link type=text/css href=codeanalysis.css /></head><body><div id=essentials><p class=essential>   --#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>   --#TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).</p><p class=essential>   --#TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.</p><p class=essential>   --#TODO: [e] add attendance, classes (arr)</p><p class=essential>   --#TODO: [e] add summary assessment values for proof.</p><p class=essential>   --#TODO: [e] add classes (arr)</p><p class=essential>  system.py</p><p class=essential>   --#TODO: [e] Check status of unit test strut here?</p><p class=essential>   --#TODO: [e] Prerequisite metrics.</p><p class=essential>  codeanalysis.py</p><p class=essential>   --# TODO: [e] Write file size metrics.</p><p class=essential>   --# TODO: [e] Write file created metrics.</p><p class=essential>   --# TODO: [e] Write file updated metrics.</p><p class=essential>   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p><p class=essential>   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p><p class=essential>   --#TODO: [e] IMPORT here.</p><p class=essential>   --#(16) Essential: [e]</p><p class=essential>   --#(17) Essential: [e] List</p><p class=essential>   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p><p class=essential>   --#TODO: [e]Write to PDF.</p><p class=essential>   --#input() #HACK: [e]Added so that results can be read when run from console. Not needed in interactive mode (or if we've run this solely to update the code analysis record).</p><p class=essential>  codeanalysis.html</p><p class=essential>   ----#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>  precommit.py</p><p class=essential>   --#TODO: [e] Run codeanalysis.</p><p class=essential>  predeploy.py</p><p class=essential>   --#TODO: [e] Load test strut and check unit tests.</p><p class=essential>   --#TODO: [e] Run code analysis.</p><p class=essential>   --#TODO: [e] Make local backup.</p>
+ <!DOCTYPE html><html><head> <link type=text/css href=codeanalysis.css /></head><body><div id=essentials><p class=essential>   --#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>   --#TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).</p><p class=essential>   --#TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.</p><p class=essential>   --#TODO: [e] add attendance, classes (arr)</p><p class=essential>   --#TODO: [e] add summary assessment values for proof.</p><p class=essential>   --#TODO: [e] add classes (arr)</p><p class=essential>  system.py</p><p class=essential>   --#TODO: [e] Check status of unit test strut here?</p><p class=essential>   --#TODO: [e] Prerequisite metrics.</p><p class=essential>  codeanalysis.py</p><p class=essential>   --# TODO: [e] Write file size metrics.</p><p class=essential>   --# TODO: [e] Write file created metrics.</p><p class=essential>   --# TODO: [e] Write file updated metrics.</p><p class=essential>   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p><p class=essential>   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p><p class=essential>   --#TODO: [e] IMPORT here.</p><p class=essential>   --#(16) Essential: [e]</p><p class=essential>   --#(17) Essential: [e] List</p><p class=essential>   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p><p class=essential>   --#TODO: [e]Write to PDF.</p><p class=essential>   --#input() #HACK: [e]Added so that results can be read when run from console. Not needed in interactive mode (or if we've run this solely to update the code analysis record).</p><p class=essential>  codeanalysis.html</p><p class=essential>   ----#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>  precommit.py</p><p class=essential>   --#TODO: [e] Run codeanalysis.</p><p class=essential>  predeploy.py</p><p class=essential>   --#TODO: [e] Load test strut and check unit tests.</p><p class=essential>   --#TODO: [e] Run code analysis.</p><p class=essential>   --#TODO: [e] Make local backup.</p>
+ <!DOCTYPE html><html><head> <link type=text/css href=codeanalysis.css /></head><body><div id=essentials><p class=essential>   --#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>   --#TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).</p><p class=essential>   --#TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.</p><p class=essential>   --#TODO: [e] add attendance, classes (arr)</p><p class=essential>   --#TODO: [e] add summary assessment values for proof.</p><p class=essential>   --#TODO: [e] add classes (arr)</p><p class=essential>  system.py</p><p class=essential>   --#TODO: [e] Check status of unit test strut here?</p><p class=essential>   --#TODO: [e] Prerequisite metrics.</p><p class=essential>  codeanalysis.py</p><p class=essential>   --# TODO: [e] Write file size metrics.</p><p class=essential>   --# TODO: [e] Write file created metrics.</p><p class=essential>   --# TODO: [e] Write file updated metrics.</p><p class=essential>   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p><p class=essential>   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p><p class=essential>   --#TODO: [e] IMPORT here.</p><p class=essential>   --#(16) Essential: [e]</p><p class=essential>   --#(17) Essential: [e] List</p><p class=essential>   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p><p class=essential>   --#TODO: [e]Write to PDF.</p><p class=essential>   --#input() #HACK: [e]Added so that results can be read when run from console. Not needed in interactive mode (or if we've run this solely to update the code analysis record).</p><p class=essential>  codeanalysis.html</p><p class=essential>   ----#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>  precommit.py</p><p class=essential>   --#TODO: [e] Run codeanalysis.</p><p class=essential>  predeploy.py</p><p class=essential>   --#TODO: [e] Load test strut and check unit tests.</p><p class=essential>   --#TODO: [e] Run code analysis.</p><p class=essential>   --#TODO: [e] Make local backup.</p>
+ <!DOCTYPE html><html><head> <link type=text/css href=codeanalysis.css /></head><body><div id=essentials><p class=essential>   --#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>   --#TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).</p><p class=essential>   --#TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.</p><p class=essential>   --#TODO: [e] add attendance, classes (arr)</p><p class=essential>   --#TODO: [e] add summary assessment values for proof.</p><p class=essential>   --#TODO: [e] add classes (arr)</p><p class=essential>  system.py</p><p class=essential>   --#TODO: [e] Check status of unit test strut here?</p><p class=essential>   --#TODO: [e] Prerequisite metrics.</p><p class=essential>  codeanalysis.py</p><p class=essential>   --# TODO: [e] Write file size metrics.</p><p class=essential>   --# TODO: [e] Write file created metrics.</p><p class=essential>   --# TODO: [e] Write file updated metrics.</p><p class=essential>   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p><p class=essential>   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p><p class=essential>   --#TODO: [e] IMPORT here.</p><p class=essential>   --#(16) Essential: [e]</p><p class=essential>   --#(17) Essential: [e] List</p><p class=essential>   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p><p class=essential>   --#TODO: [e]Write to PDF.</p><p class=essential>   --#input() #HACK: [e]Added so that results can be read when run from console. Not needed in interactive mode (or if we've run this solely to update the code analysis record).</p><p class=essential>  codeanalysis.html</p><p class=essential>   ----#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>  precommit.py</p><p class=essential>   --#TODO: [e] Run codeanalysis.</p><p class=essential>  predeploy.py</p><p class=essential>   --#TODO: [e] Load test strut and check unit tests.</p><p class=essential>   --#TODO: [e] Run code analysis.</p><p class=essential>   --#TODO: [e] Make local backup.</p>
+ <!DOCTYPE html><html><head> <link type=text/css href=codeanalysis.css /></head><body><div id=essentials><p class=essential>   --#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>   --#TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).</p><p class=essential>   --#TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.</p><p class=essential>   --#TODO: [e] add attendance, classes (arr)</p><p class=essential>   --#TODO: [e] add summary assessment values for proof.</p><p class=essential>   --#TODO: [e] add classes (arr)</p><p class=essential>  system.py</p><p class=essential>   --#TODO: [e] Check status of unit test strut here?</p><p class=essential>   --#TODO: [e] Prerequisite metrics.</p><p class=essential>  codeanalysis.py</p><p class=essential>   --# TODO: [e] Write file size metrics.</p><p class=essential>   --# TODO: [e] Write file created metrics.</p><p class=essential>   --# TODO: [e] Write file updated metrics.</p><p class=essential>   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p><p class=essential>   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p><p class=essential>   --#TODO: [e] IMPORT here.</p><p class=essential>   --#(16) Essential: [e]</p><p class=essential>   --#(17) Essential: [e] List</p><p class=essential>   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p><p class=essential>   --#TODO: [e]Write to PDF.</p><p class=essential>   --#input() #HACK: [e]Added so that results can be read when run from console. Not needed in interactive mode (or if we've run this solely to update the code analysis record).</p><p class=essential>  codeanalysis.html</p><p class=essential>   ----#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>  precommit.py</p><p class=essential>   --#TODO: [e] Run codeanalysis.</p><p class=essential>  predeploy.py</p><p class=essential>   --#TODO: [e] Load test strut and check unit tests.</p><p class=essential>   --#TODO: [e] Run code analysis.</p><p class=essential>   --#TODO: [e] Make local backup.</p>
+ <!DOCTYPE html><html><head> <link type=text/css href=codeanalysis.css /></head><body><div id=essentials><p class=essential>   --#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>   --#TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).</p><p class=essential>   --#TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.</p><p class=essential>   --#TODO: [e] add attendance, classes (arr)</p><p class=essential>   --#TODO: [e] add summary assessment values for proof.</p><p class=essential>   --#TODO: [e] add classes (arr)</p><p class=essential>  system.py</p><p class=essential>   --#TODO: [e] Check status of unit test strut here?</p><p class=essential>   --#TODO: [e] Prerequisite metrics.</p><p class=essential>  codeanalysis.py</p><p class=essential>   --# TODO: [e] Write file size metrics.</p><p class=essential>   --# TODO: [e] Write file created metrics.</p><p class=essential>   --# TODO: [e] Write file updated metrics.</p><p class=essential>   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p><p class=essential>   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p><p class=essential>   --#TODO: [e] IMPORT here.</p><p class=essential>   --#(16) Essential: [e]</p><p class=essential>   --#(17) Essential: [e] List</p><p class=essential>   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p><p class=essential>   --#TODO: [e]Write to PDF.</p><p class=essential>   --#input() #HACK: [e]Added so that results can be read when run from console. Not needed in interactive mode (or if we've run this solely to update the code analysis record).</p><p class=essential>  codeanalysis.html</p><p class=essential>   ----#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>  precommit.py</p><p class=essential>   --#TODO: [e] Run codeanalysis.</p><p class=essential>  predeploy.py</p><p class=essential>   --#TODO: [e] Load test strut and check unit tests.</p><p class=essential>   --#TODO: [e] Run code analysis.</p><p class=essential>   --#TODO: [e] Make local backup.</p>
+ <!DOCTYPE html><html><head> <link type=text/css href=codeanalysis.css /></head><body><div id=essentials><p class=essential>   --#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>   --#TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).</p><p class=essential>   --#TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.</p><p class=essential>   --#TODO: [e] add attendance, classes (arr)</p><p class=essential>   --#TODO: [e] add summary assessment values for proof.</p><p class=essential>   --#TODO: [e] add classes (arr)</p><p class=essential>  system.py</p><p class=essential>   --#TODO: [e] Check status of unit test strut here?</p><p class=essential>   --#TODO: [e] Prerequisite metrics.</p><p class=essential>  codeanalysis.py</p><p class=essential>   --# TODO: [e] Write file size metrics.</p><p class=essential>   --# TODO: [e] Write file created metrics.</p><p class=essential>   --# TODO: [e] Write file updated metrics.</p><p class=essential>   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p><p class=essential>   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p><p class=essential>   --#TODO: [e] IMPORT here.</p><p class=essential>   --#(16) Essential: [e]</p><p class=essential>   --#(17) Essential: [e] List</p><p class=essential>   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p><p class=essential>   --#TODO: [e]Write to PDF.</p><p class=essential>   --#input() #HACK: [e]Added so that results can be read when run from console. Not needed in interactive mode (or if we've run this solely to update the code analysis record).</p><p class=essential>  codeanalysis.html</p><p class=essential>   ----#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>  precommit.py</p><p class=essential>   --#TODO: [e] Run codeanalysis.</p><p class=essential>  predeploy.py</p><p class=essential>   --#TODO: [e] Load test strut and check unit tests.</p><p class=essential>   --#TODO: [e] Run code analysis.</p><p class=essential>   --#TODO: [e] Make local backup.</p>
+ <!DOCTYPE html><html><head> <link type=text/css href=codeanalysis.css /></head><body><div id=essentials><p class=essential>   --#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>   --#TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).</p><p class=essential>   --#TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.</p><p class=essential>   --#TODO: [e] add attendance, classes (arr)</p><p class=essential>   --#TODO: [e] add summary assessment values for proof.</p><p class=essential>   --#TODO: [e] add classes (arr)</p><p class=essential>  system.py</p><p class=essential>   --#TODO: [e] Check status of unit test strut here?</p><p class=essential>   --#TODO: [e] Prerequisite metrics.</p><p class=essential>  codeanalysis.py</p><p class=essential>   --# TODO: [e] Write file size metrics.</p><p class=essential>   --# TODO: [e] Write file created metrics.</p><p class=essential>   --# TODO: [e] Write file updated metrics.</p><p class=essential>   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p><p class=essential>   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p><p class=essential>   --#TODO: [e] IMPORT here.</p><p class=essential>   --#(16) Essential: [e]</p><p class=essential>   --#(17) Essential: [e] List</p><p class=essential>   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p><p class=essential>   --#TODO: [e]Write to PDF.</p><p class=essential>   --#input() #HACK: [e]Added so that results can be read when run from console. Not needed in interactive mode (or if we've run this solely to update the code analysis record).</p><p class=essential>  codeanalysis.html</p><p class=essential>   ----#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>  precommit.py</p><p class=essential>   --#TODO: [e] Run codeanalysis.</p><p class=essential>  predeploy.py</p><p class=essential>   --#TODO: [e] Load test strut and check unit tests.</p><p class=essential>   --#TODO: [e] Run code analysis.</p><p class=essential>   --#TODO: [e] Make local backup.</p>
+ <!DOCTYPE html><html><head> <link type=text/css href=codeanalysis.css /></head><body><div id=essentials><p class=essential>   --#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>   --#TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).</p><p class=essential>   --#TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.</p><p class=essential>   --#TODO: [e] add attendance, classes (arr)</p><p class=essential>   --#TODO: [e] add summary assessment values for proof.</p><p class=essential>   --#TODO: [e] add classes (arr)</p><p class=essential>  system.py</p><p class=essential>   --#TODO: [e] Check status of unit test strut here?</p><p class=essential>   --#TODO: [e] Prerequisite metrics.</p><p class=essential>  codeanalysis.py</p><p class=essential>   --# TODO: [e] Write file size metrics.</p><p class=essential>   --# TODO: [e] Write file created metrics.</p><p class=essential>   --# TODO: [e] Write file updated metrics.</p><p class=essential>   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p><p class=essential>   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p><p class=essential>   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p><p class=essential>   --#TODO: [e] IMPORT here.</p><p class=essential>   --#(16) Essential: [e]</p><p class=essential>   --#(17) Essential: [e] List</p><p class=essential>   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p><p class=essential>   --#TODO: [e]Write to PDF.</p><p class=essential>   --#input() #HACK: [e]Added so that results can be read when run from console. Not needed in interactive mode (or if we've run this solely to update the code analysis record).</p><p class=essential>  codeanalysis.html</p><p class=essential>   ----#TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses</p><p class=essential>  precommit.py</p><p class=essential>   --#TODO: [e] Run codeanalysis.</p><p class=essential>  predeploy.py</p><p class=essential>   --#TODO: [e] Load test strut and check unit tests.</p><p class=essential>   --#TODO: [e] Run code analysis.</p><p class=essential>   --#TODO: [e] Make local backup.</p>


2012-11-28 21:11:32.809000
- l
- - <!-- #TODO: [d] Update 404 -->
- t.py
- - #TODO: Change name of function, incorrect!
- ects.py
- #TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses
-  #TODO: [i] Use ReferenceProperty for one to many relationship. https://developers.google.com/appengine/articles/modeling
-  #TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).
-  #TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.
-  #TODO: [e] add attendance, classes (arr)
-  #TODO: [e] add summary assessment values for proof.
-  #TODO: [d] add proper assessment.
-  #TODO: [d] add other attendance values.
-  #TODO: [e] add classes (arr)
-  #TODO: [i] NEXT STEP: How to put in the school? What is the key for? How to retrieve?
- tml
-  <!-- TODO: POPULATE in Jinja2  ... (for item in userNavItems) -->
- - <div id="developerlinks"> <!-- TODO: Hide in dev mode -->
- py
-  #TODO: [e] Check status of unit test strut here?
-  self.version = "alpha" #TODO: [d] Get version number here.
-  self.passedUnitTests = False #TODO: [d] Get version number here.
-  #TODO: [c] Add owner, referenceURI, prerequisites[], (more next lines-->)
-  #TODO: [e] Prerequisite metrics.
- a.py
- #TODO: Replace these strings with values loaded from textfiles on module start (system object? onload of admin console, load these to system.object).
- lysis.py
- # TODO: [d] see page 8 of python data vis.
- # TODO: [e] Write file size metrics.
- # TODO: [e] Write file created metrics.
- # TODO: [e] Write file updated metrics.
- # TODO: [d] Write class count metrics.
- # TODO: [d] Write function count metrics.
- # TODO: [d] Write class list of file.
- # TODO: [d] Write function list of file.
-  # TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.
-  # TODO: [i] Get functions/classes that do not have docstrings.
-  # TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)
-  # TODO: [i] Assume idealistic if no tag.
-  # TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)
-  # TODO: [d] Check for 'conflicted copy' in title of file, and write as a system level bug with list of conflicted versions. [i] Get a diff of changes.
-  # TODO: [i] Decide how to handle multitagged TODOs (currently counts against all?).
-  # TODO: [d] Include results of unit tests (perhaps last unit test run outputs a text file and this reads that, rather than run unit test suite?).
-  # TODO: [i] Use http://docs.python.org/library/timeit.html#module-timeit to time how long unit tests take/how long it takes to import modules.
-  COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.
-  LOCATIONSTAMP = "" #TODO: [i] Add location stamp (using what library?).
-  #TODO: [i] Add exception here for sLine that doesn't meet LoC matching pattern. What about docstrings, as currently flagged as code?
- - #TODO: [e] IMPORT here.
- - #(24) Other tagging: [other] #TODO: [d] append tag to list of additional tags. Means can get a list of specific todo related to [unittests], for example.
- - print (" TODO Items:           " + str(todoCount))
- - #TODO: [i] For each 'other' tag item, print count?
- - #TODO: [d] Display other tag list.
- - print (" TODO ITEMS as of " + str(DATESTAMP))
- - #if line.strip()[0:2] == "..": #TODO: [d] change to option of true/false of showing only file and not path breaks this.
- - print (line), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - #TODO: [d]Check against http://stackoverflow.com/questions/2666863/list-to-csv-in-python
- - #TODO: [i] Fix HMTL render.
- - #HACK: This works, but it means that we can't see where the TODO came from.
- - #TODO: [d] Remove all these debug strings.
- - #TODO: [i] Add call to PDF write here. Would like colour coding for categories (e.g replace [c] with RED [c]).
- - #TODO: [i] I only needed to duplicate handleResults because it wasn't broken down enough. Refactor these.
- - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
- - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
- - #TODO: Change the path addition to only append if not already in path?
- - fileIgnoreList = [""] #TODO: ignore codeanalysis.py &    imported non-project files (Add at later date. This file should be done fairly early in project (before lit review finished)).
- - #TODO: [e]Write to PDF.
- it.py
- #TODO: [c] Make executable.
- #TODO: [e] Run codeanalysis.
- #TODO: [i] Probably move codeanalysis in here.
- oy.py
- #TODO: [c] Make executable.
- #TODO: [e] Load test strut and check unit tests.
- #TODO: [e] Run code analysis.
- #TODO: [i] Make change to app.yaml?
- #TODO: [e] Make local backup.
- #TODO: [i] Explore some performance testing. Possible to use http://jspro.com/apis/profiling-page-loads-with-the-navigation-timing-api/ OR http://jspro.com/apis/discovering-the-high-resolution-time-api/ ? Would need to do postdeploy, probably.


2012-11-28 21:12:11.254000
+ l
+ - <!-- #TODO: [d] Update 404 -->
+ t.py
+ - #TODO: Change name of function, incorrect!
+ ects.py
+ #TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses
+  #TODO: [i] Use ReferenceProperty for one to many relationship. https://developers.google.com/appengine/articles/modeling
+  #TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).
+  #TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.
+  #TODO: [e] add attendance, classes (arr)
+  #TODO: [e] add summary assessment values for proof.
+  #TODO: [d] add proper assessment.
+  #TODO: [d] add other attendance values.
+  #TODO: [e] add classes (arr)
+  #TODO: [i] NEXT STEP: How to put in the school? What is the key for? How to retrieve?
+ tml
+  <!-- TODO: POPULATE in Jinja2  ... (for item in userNavItems) -->
+ - <div id="developerlinks"> <!-- TODO: Hide in dev mode -->
+ py
+  #TODO: [e] Check status of unit test strut here?
+  self.version = "alpha" #TODO: [d] Get version number here.
+  self.passedUnitTests = False #TODO: [d] Get version number here.
+  #TODO: [c] Add owner, referenceURI, prerequisites[], (more next lines-->)
+  #TODO: [e] Prerequisite metrics.
+ a.py
+ #TODO: Replace these strings with values loaded from textfiles on module start (system object? onload of admin console, load these to system.object).
+ lysis.py
+ # TODO: [d] see page 8 of python data vis.
+ # TODO: [e] Write file size metrics.
+ # TODO: [e] Write file created metrics.
+ # TODO: [e] Write file updated metrics.
+ # TODO: [d] Write class count metrics.
+ # TODO: [d] Write function count metrics.
+ # TODO: [d] Write class list of file.
+ # TODO: [d] Write function list of file.
+  # TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.
+  # TODO: [i] Get functions/classes that do not have docstrings.
+  # TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)
+  # TODO: [i] Assume idealistic if no tag.
+  # TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)
+  # TODO: [d] Check for 'conflicted copy' in title of file, and write as a system level bug with list of conflicted versions. [i] Get a diff of changes.
+  # TODO: [i] Decide how to handle multitagged TODOs (currently counts against all?).
+  # TODO: [d] Include results of unit tests (perhaps last unit test run outputs a text file and this reads that, rather than run unit test suite?).
+  # TODO: [i] Use http://docs.python.org/library/timeit.html#module-timeit to time how long unit tests take/how long it takes to import modules.
+  COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.
+  LOCATIONSTAMP = "" #TODO: [i] Add location stamp (using what library?).
+  #TODO: [i] Add exception here for sLine that doesn't meet LoC matching pattern. What about docstrings, as currently flagged as code?
+ - #TODO: [e] IMPORT here.
+ - #(24) Other tagging: [other] #TODO: [d] append tag to list of additional tags. Means can get a list of specific todo related to [unittests], for example.
+ - print (" TODO Items:           " + str(todoCount))
+ - #TODO: [i] For each 'other' tag item, print count?
+ - #TODO: [d] Display other tag list.
+ - print (" TODO ITEMS as of " + str(DATESTAMP))
+ - #if line.strip()[0:2] == "..": #TODO: [d] change to option of true/false of showing only file and not path breaks this.
+ - print (line), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - #TODO: [d]Check against http://stackoverflow.com/questions/2666863/list-to-csv-in-python
+ - #TODO: [i] Fix HMTL render.
+ - #HACK: This works, but it means that we can't see where the TODO came from.
+ - #TODO: [d] Remove all these debug strings.
+ - #TODO: [i] Add call to PDF write here. Would like colour coding for categories (e.g replace [c] with RED [c]).
+ - #TODO: [i] I only needed to duplicate handleResults because it wasn't broken down enough. Refactor these.
+ - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
+ - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
+ - #TODO: Change the path addition to only append if not already in path?
+ - fileIgnoreList = [""] #TODO: ignore codeanalysis.py &    imported non-project files (Add at later date. This file should be done fairly early in project (before lit review finished)).
+ - #TODO: [e]Write to PDF.
+ it.py
+ #TODO: [c] Make executable.
+ #TODO: [e] Run codeanalysis.
+ #TODO: [i] Probably move codeanalysis in here.
+ oy.py
+ #TODO: [c] Make executable.
+ #TODO: [e] Load test strut and check unit tests.
+ #TODO: [e] Run code analysis.
+ #TODO: [i] Make change to app.yaml?
+ #TODO: [e] Make local backup.
+ #TODO: [i] Explore some performance testing. Possible to use http://jspro.com/apis/profiling-page-loads-with-the-navigation-timing-api/ OR http://jspro.com/apis/discovering-the-high-resolution-time-api/ ? Would need to do postdeploy, probably.


2012-11-28 21:12:52.364000




2012-11-28 22:33:01.635000
-  <!-- TODO: POPULATE in Jinja2  ... (for item in userNavItems) -->
+  <!-- #TODO: [d] POPULATE in Jinja2  ... (for item in userNavItems) -->
- - <div id="developerlinks"> <!-- TODO: Hide in dev mode -->
+ - <div id="developerlinks"> <!-- #TODO: [d] Hide in live mode -->
- lysis.py
+ lysis - Copy (2).py
+ lysis.py
+ # TODO: [d] see page 8 of python data vis.
+ # TODO: [e] Write file size metrics.
+ # TODO: [e] Write file created metrics.
+ # TODO: [e] Write file updated metrics.
+ # TODO: [d] Write class count metrics.
+ # TODO: [d] Write function count metrics.
+ # TODO: [d] Write class list of file.
+ # TODO: [d] Write function list of file.
+  # TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.
+  # TODO: [i] Get functions/classes that do not have docstrings.
+  # TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)
+  # TODO: [i] Assume idealistic if no tag.
+  # TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)
+  # TODO: [d] Check for 'conflicted copy' in title of file, and write as a system level bug with list of conflicted versions. [i] Get a diff of changes.
+  # TODO: [i] Decide how to handle multitagged TODOs (currently counts against all?).
+  # TODO: [d] Include results of unit tests (perhaps last unit test run outputs a text file and this reads that, rather than run unit test suite?).
+  # TODO: [i] Use http://docs.python.org/library/timeit.html#module-timeit to time how long unit tests take/how long it takes to import modules.
+  COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.
+  LOCATIONSTAMP = "" #TODO: [i] Add location stamp (using what library?).
+  #TODO: [i] Add exception here for sLine that doesn't meet LoC matching pattern. What about docstrings, as currently flagged as code?
+ - #TODO: [e] IMPORT here.
+ - #(24) Other tagging: [other] #TODO: [d] append tag to list of additional tags. Means can get a list of specific todo related to [unittests], for example.
+ - print (" TODO Items:           " + str(todoCount))
+ - #TODO: [i] For each 'other' tag item, print count?
+ - #TODO: [d] Display other tag list.
+ - print (" TODO ITEMS as of " + str(DATESTAMP))
+ - #if line.strip()[0:2] == "..": #TODO: [d] change to option of true/false of showing only file and not path breaks this.
+ - print (line), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - #TODO: [d]Check against http://stackoverflow.com/questions/2666863/list-to-csv-in-python
+ - #TODO: [i] Fix HMTL render.
+ - #HACK: This works, but it means that we can't see where the TODO came from.
+ - #TODO: [d] Remove all these debug strings.
+ - #TODO: [i] Add call to PDF write here. Would like colour coding for categories (e.g replace [c] with RED [c]).
+ - #TODO: [i] I only needed to duplicate handleResults because it wasn't broken down enough. Refactor these.
+ - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
+ - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
+ - #TODO: Change the path addition to only append if not already in path?
+ - fileIgnoreList = ["codeanalysis.html"] #TODO: ignore imported non-project files (Add at later date. This file should be done fairly early in project (before lit review finished)).
+ - #TODO: [e]Write to PDF.


2012-11-28 22:34:39.639000


2012-11-28 22:36:16.805000


2012-11-28 22:40:24.496000


2012-11-28 22:42:48.075000
+ lysis.html
+  <p class="essential source">   --# TODO: [e] Write file size metrics.</p>
+  <p class="essential source">   --# TODO: [e] Write file created metrics.</p>
+  <p class="essential source">   --# TODO: [e] Write file updated metrics.</p>
+  <p class="essential source">   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p>
+  <p class="essential source">   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p>
+  <p class="essential source">   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p>
+  <p class="essential source">   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p>
+  <p class="essential source">   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p>
+  <p class="essential source">   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p>
+  <p class="essential source">   --# TODO: [e] Write file size metrics.</p>
+  <p class="essential source">   --# TODO: [e] Write file created metrics.</p>
+  <p class="essential source">   --# TODO: [e] Write file updated metrics.</p>
+  <p class="essential source">   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p>
+  <p class="essential source">   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p>
+  <p class="essential source">   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p>
+  <p class="essential source">   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p>
+  <p class="essential source">   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p>
+  <p class="essential source">   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p>


2012-11-28 22:50:27.117000
- lysis.html
-  <p class="essential source">   --# TODO: [e] Write file size metrics.</p>
-  <p class="essential source">   --# TODO: [e] Write file created metrics.</p>
-  <p class="essential source">   --# TODO: [e] Write file updated metrics.</p>
-  <p class="essential source">   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p>
-  <p class="essential source">   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p>
-  <p class="essential source">   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p>
-  <p class="essential source">   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p>
-  <p class="essential source">   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p>
-  <p class="essential source">   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p>
-  <p class="essential source">   --# TODO: [e] Write file size metrics.</p>
-  <p class="essential source">   --# TODO: [e] Write file created metrics.</p>
-  <p class="essential source">   --# TODO: [e] Write file updated metrics.</p>
-  <p class="essential source">   --# TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.</p>
-  <p class="essential source">   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p>
-  <p class="essential source">   --# TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)</p>
-  <p class="essential source">   --# TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)</p>
-  <p class="essential source">   --COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.</p>
-  <p class="essential source">   --#TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.</p>


2012-11-28 22:53:53.701000


2012-11-28 22:55:01.432000


2012-11-28 23:16:37.621000


2012-11-28 23:17:56.300000


2012-11-28 23:20:46.054000


2012-11-30 01:22:12.886000
+ # TODO: [d] see page 8 of python data vis.
+ # TODO: [e] Write file size metrics.
+ # TODO: [e] Write file created metrics.
+ # TODO: [e] Write file updated metrics.
+ # TODO: [d] Write class count metrics.
+ # TODO: [d] Write function count metrics.
+ # TODO: [d] Write class list of file.
+ # TODO: [d] Write function list of file.
+  # TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.
+  # TODO: [i] Get functions/classes that do not have docstrings.
+  # TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)
+  # TODO: [i] Assume idealistic if no tag.
+  # TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)
+  # TODO: [d] Check for 'conflicted copy' in title of file, and write as a system level bug with list of conflicted versions. [i] Get a diff of changes.
+  # TODO: [i] Decide how to handle multitagged TODOs (currently counts against all?).
+  # TODO: [d] Include results of unit tests (perhaps last unit test run outputs a text file and this reads that, rather than run unit test suite?).
+  # TODO: [i] Use http://docs.python.org/library/timeit.html#module-timeit to time how long unit tests take/how long it takes to import modules.
+  COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.
+  LOCATIONSTAMP = "" #TODO: [i] Add location stamp (using what library?).
+  #TODO: [i] Add exception here for sLine that doesn't meet LoC matching pattern. What about docstrings, as currently flagged as code?
+ - #TODO: [e] IMPORT here.
+ - #(24) Other tagging: [other] #TODO: [d] append tag to list of additional tags. Means can get a list of specific todo related to [unittests], for example.
+ - print (" TODO Items:           " + str(todoCount))
+ - #TODO: [i] For each 'other' tag item, print count?
+ - #TODO: [d] Display other tag list.
+ - print (" TODO ITEMS as of " + str(DATESTAMP))
+ - #if line.strip()[0:2] == "..": #TODO: [d] change to option of true/false of showing only file and not path breaks this.
+ - print (line), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - #TODO: [d]Check against http://stackoverflow.com/questions/2666863/list-to-csv-in-python
+ - #TODO: [i] Fix HMTL render.
+ - #HACK: This works, but it means that we can't see where the TODO came from.
+ - #TODO: [d] Remove all these debug strings.
+ - #TODO: [i] Add call to PDF write here. Would like colour coding for categories (e.g replace [c] with RED [c]).
+ - #TODO: [i] I only needed to duplicate handleResults because it wasn't broken down enough. Refactor these.
+ - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
+ - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
+ - #TODO: Change the path addition to only append if not already in path?
+ - fileIgnoreList = [""] #TODO: ignore codeanalysis.py &    imported non-project files (Add at later date. This file should be done fairly early in project (before lit review finished)).
+ - #TODO: [e]Write to PDF.
+ lysis - Copy.py


2012-11-30 14:17:47.720000
+ trequester.py
+  #TODO: [e] Only works if returning a string.
- lysis - Copy (2).py
- # TODO: [d] see page 8 of python data vis.
- # TODO: [e] Write file size metrics.
- # TODO: [e] Write file created metrics.
- # TODO: [e] Write file updated metrics.
- # TODO: [d] Write class count metrics.
- # TODO: [d] Write function count metrics.
- # TODO: [d] Write class list of file.
- # TODO: [d] Write function list of file.
-  # TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.
-  # TODO: [i] Get functions/classes that do not have docstrings.
-  # TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)
-  # TODO: [i] Assume idealistic if no tag.
-  # TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)
-  # TODO: [d] Check for 'conflicted copy' in title of file, and write as a system level bug with list of conflicted versions. [i] Get a diff of changes.
-  # TODO: [i] Decide how to handle multitagged TODOs (currently counts against all?).
-  # TODO: [d] Include results of unit tests (perhaps last unit test run outputs a text file and this reads that, rather than run unit test suite?).
-  # TODO: [i] Use http://docs.python.org/library/timeit.html#module-timeit to time how long unit tests take/how long it takes to import modules.
-  COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.
-  LOCATIONSTAMP = "" #TODO: [i] Add location stamp (using what library?).
-  #TODO: [i] Add exception here for sLine that doesn't meet LoC matching pattern. What about docstrings, as currently flagged as code?
- - #TODO: [e] IMPORT here.
- - #(24) Other tagging: [other] #TODO: [d] append tag to list of additional tags. Means can get a list of specific todo related to [unittests], for example.
- - print (" TODO Items:           " + str(todoCount))
- - #TODO: [i] For each 'other' tag item, print count?
- - #TODO: [d] Display other tag list.
- - print (" TODO ITEMS as of " + str(DATESTAMP))
- - #if line.strip()[0:2] == "..": #TODO: [d] change to option of true/false of showing only file and not path breaks this.
- - print (line), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - #TODO: [d]Check against http://stackoverflow.com/questions/2666863/list-to-csv-in-python
- - #TODO: [i] Fix HMTL render.
- - #HACK: This works, but it means that we can't see where the TODO came from.
- - #TODO: [d] Remove all these debug strings.
- - #TODO: [i] Add call to PDF write here. Would like colour coding for categories (e.g replace [c] with RED [c]).
- - #TODO: [i] I only needed to duplicate handleResults because it wasn't broken down enough. Refactor these.
- - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
- - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
- - #TODO: Change the path addition to only append if not already in path?
- - fileIgnoreList = [""] #TODO: ignore codeanalysis.py &    imported non-project files (Add at later date. This file should be done fairly early in project (before lit review finished)).
- - #TODO: [e]Write to PDF.
- lysis - Copy.py
- # TODO: [d] see page 8 of python data vis.
- # TODO: [e] Write file size metrics.
- # TODO: [e] Write file created metrics.
- # TODO: [e] Write file updated metrics.
- # TODO: [d] Write class count metrics.
- # TODO: [d] Write function count metrics.
- # TODO: [d] Write class list of file.
- # TODO: [d] Write function list of file.
-  # TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.
-  # TODO: [i] Get functions/classes that do not have docstrings.
-  # TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)
-  # TODO: [i] Assume idealistic if no tag.
-  # TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)
-  # TODO: [d] Check for 'conflicted copy' in title of file, and write as a system level bug with list of conflicted versions. [i] Get a diff of changes.
-  # TODO: [i] Decide how to handle multitagged TODOs (currently counts against all?).
-  # TODO: [d] Include results of unit tests (perhaps last unit test run outputs a text file and this reads that, rather than run unit test suite?).
-  # TODO: [i] Use http://docs.python.org/library/timeit.html#module-timeit to time how long unit tests take/how long it takes to import modules.
-  COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.
-  LOCATIONSTAMP = "" #TODO: [i] Add location stamp (using what library?).
-  #TODO: [i] Add exception here for sLine that doesn't meet LoC matching pattern. What about docstrings, as currently flagged as code?
- - #TODO: [e] IMPORT here.
- - #(24) Other tagging: [other] #TODO: [d] append tag to list of additional tags. Means can get a list of specific todo related to [unittests], for example.
- - print (" TODO Items:           " + str(todoCount))
- - #TODO: [i] For each 'other' tag item, print count?
- - #TODO: [d] Display other tag list.
- - print (" TODO ITEMS as of " + str(DATESTAMP))
- - #if line.strip()[0:2] == "..": #TODO: [d] change to option of true/false of showing only file and not path breaks this.
- - print (line), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
- - #TODO: [d]Check against http://stackoverflow.com/questions/2666863/list-to-csv-in-python
- - #TODO: [i] Fix HMTL render.
- - #HACK: This works, but it means that we can't see where the TODO came from.
- - #TODO: [d] Remove all these debug strings.
- - #TODO: [i] Add call to PDF write here. Would like colour coding for categories (e.g replace [c] with RED [c]).
- - #TODO: [i] I only needed to duplicate handleResults because it wasn't broken down enough. Refactor these.
- - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
- - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
- - #TODO: Change the path addition to only append if not already in path?
- - fileIgnoreList = [""] #TODO: ignore codeanalysis.py &    imported non-project files (Add at later date. This file should be done fairly early in project (before lit review finished)).
- - #TODO: [e]Write to PDF.
-  # TODO: [e] output to do list to pdf. [i] ideally colour code to make easier ([i]idealistic = grey, [c]critical = amber (bugs are red!), [e]essential = green, [d]desirable = black)
-  # TODO: [i] Decide how to handle multitagged TODOs (currently counts against all?).
- - #TODO: [e] IMPORT here.
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished [notrack].
- - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
+ - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished [notrack].
- - #TODO: [i] Fix HMTL render.
+ - Switch for iterating through types of TODO items. [notrack]
- - #HACK: This works, but it means that we can't see where the TODO came from.
+ - #HACK: [i] This works, but it means that we can't see where the TODO came from.
- - #TODO: [i] Add call to PDF write here. Would like colour coding for categories (e.g replace [c] with RED [c]).
- - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
+ - #TODO: [i] Use jqPlot (or current js render library) to plot line comparison of LoC and TODO items.
- - #TODO: [e] Use jflot (or current js render library) to plot line comparison of LoC and TODO items.
+ - #TODO: [i] Use jqPlot (or current js render library) to plot line comparison of LoC and TODO items.
+ - # TODO: [d] should build this function into a unit test suite. every time we do a full check, we also log code review.
+ - # TODO: [i] if new metrics added, update previous rows? Impossible?


2012-11-30 14:30:30.997000


2012-11-30 14:36:57.589000


2012-11-30 14:42:52.050000
- #TODO: [c] Make executable.
- #TODO: [c] Make executable.


2012-11-30 14:50:13.309000
-  COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [e]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.
+  COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [i]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.
+ - #(22) No importance level: [blank] #TODO: [d] In list, this goes above idealistic. May need regex for [<any characters>] pattern.
- - #(24) Other tagging: [other] #TODO: [d] append tag to list of additional tags. Means can get a list of specific todo related to [unittests], for example.
+ - #(24) Other tagging: [other] #TODO: [d] append tag to list of additional tags. Means can get a list of specific todo related to (unittests), for example.


2012-11-30 15:32:07.457000


2012-11-30 16:41:56.450000


2012-12-06 20:36:39.686000
+  #TODO: [d] Look at whether properties should be ProperCase instead of camelCase, so that calls are like Dataset.Name() instead of Dataset.name().
+  dateOfReference = db.DateTimeProperty(auto_now_add=True)# Indicates the date that the dataset refers to. This is what shows on the timeline! #TODO: [e] Default dataset dateofreference is now(). Using auto_now_add=True for the moment.
+  status = db.StringProperty(default='Placeholder') #TODO: [e] Manage lifecycle of dataset from non-existent (impossible by definition), to placeholder (default), to minimal, to incomplete, to complete.
+  tags = db.StringProperty(default='') #TODO: [d] Tags would be single line comma separated. Does that make it parseable or not? Ber in mind that few datasets though, mainly internally used.
+  log = db.StringProperty(default='') #TODO: [e] Does History/Log need to be an additional object (would be under OO paradigm) , or is it ok as a long string object that will be handled separately later? Probably would use this on other objects (e.g. School), so maybe...
+  dataset = db.Dataset #TODO: [c] This is the parent dataset. Each dataset will have multiple datasetsources. This MUST be a reference property.
+  domainArea = db.StringProperty(default='Not set')  #TODO: [e] DatasetSource.domainareas are Assessment, Behaviour, Attendance, Staff, Premises etc.
+  sourceType = db.StringProperty(default='Not set')  #TODO: [e] sourcetype is either "new" (new dataset source file...stored as string object in this object?), "inherit", "peryear (where we'll need to define these per year (targetYear != All).
+  #inheritSource = db.Dataset  #TODO: [e] Inherit dataset. Is this nullable, or should it be the parent dataset as default?
+  #fileSource = file #TODO: [d] Ideally, keep data with the dataset. Thus export of dataset = 'for each dataset source, save to file'.
+  targetYear = db.DateTimeProperty() #TODO: [e] target
+  sourceYear = db.DateTimeProperty() #TODO: [e] Usually empty, but exists so that you can inherit Y7 data at start of Y8.
+  urn = db.IntegerProperty(default=0) #TODO: [e] School URN may need to be different number type (Int long enough?).
+  ownerUserID = db.StringProperty(default='') #TODO: [d] Check this one. See GApps Reference.
+  #TODO: [e] The whole of this if branch needs moving out into a separate object handler - ideally, we should be able to get the type of handler required from the handlerName (or passed as other argument).
+  #p.drawImage('dog.jpg', 150, 400) #TODO: [d] This is how you return an image dynamically. See reportlab documentation.
+  #TODO: [e] Add test of object *returned by handler function*, in order to return it using the right methods of self.response().
+ do.py
+ #TODO: [d] Explore http://demos.kendoui.com/dataviz/scatter-charts/scatter-line.html as alternative to jqPlot.
+ #TODO: [d] Explore processing.js as alternative to jqPlot.
+ #TODO: [e] Move rendering of charts and analysis to separate Python classes and file. NOT edu objects!
+ #TODO: [d] Add distribute to email (requires email property on staff).
+  #TODO: [i] Add non-staff distribution contacts (both inherit from superclass or use aggregation).
+  #TODO: [d] Add single PDF output - where items for same person are in order, with either (a) footer identifying who it is for, or (b) coversheet with list of pages and who it is for.
+  #TODO: [d] Get tutor group members (iterate through staff and students). Probably one to cache at System or collection level?
+ .py
+  #TODO: [i] Make sure that use singular versions of assert tests (assertEqual, NOT assertEquals *S), as these undocumented versions violate single way principle, as per http://stackoverflow.com/a/931011
+  #TODO: [e] After this, save to .txt file. Will most likely need 'live' tests stored separately, as won't be able to write to a file in the filesystem on GAE.

