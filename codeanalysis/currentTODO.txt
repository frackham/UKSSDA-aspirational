  404.html
   --152 - <!-- #TODO: [d] Update 404 -->
  dal_temp.py
   --167 - #TODO: Change name of function, incorrect!
  edu_objects.py
   --9 - #TODO: [e] Use...-- https://developers.google.com/appengine/docs/python/datastore/typesandpropertyclasses
   --12 - #TODO: [i] Use ReferenceProperty for one to many relationship. https://developers.google.com/appengine/articles/modeling
   --14 - #TODO: [d] Look at whether properties should be ProperCase instead of camelCase, so that calls are like Dataset.Name() instead of Dataset.name().
   --20 - dateOfReference = db.DateTimeProperty(auto_now_add=True)# Indicates the date that the dataset refers to. This is what shows on the timeline! #TODO: [e] Default dataset dateofreference is now(). Using auto_now_add=True for the moment.
   --23 - status = db.StringProperty(default='Placeholder') #TODO: [e] Manage lifecycle of dataset from non-existent (impossible by definition), to placeholder (default), to minimal, to incomplete, to complete.
   --24 - #TODO: [e] add fields: assessmentType [estimates, targets, results, current-working, current-possible(?).
   --25 - tags = db.StringProperty(default='') #TODO: [d] Tags would be single line comma separated. Does that make it parseable or not? Ber in mind that few datasets though, mainly internally used.
   --26 - log = db.StringProperty(default='') #TODO: [e] Does History/Log need to be an additional object (would be under OO paradigm) , or is it ok as a long string object that will be handled separately later? Probably would use this on other objects (e.g. School), so maybe...
   --31 - domainArea = db.StringProperty(default='Not set')  #TODO: [e] DatasetSource.domainareas are Assessment, Behaviour, Attendance, Staff, Premises etc.
   --32 - sourceType = db.StringProperty(default='Not set')  #TODO: [e] sourcetype is either "new" (new dataset source file...stored as string object in this object?), "inherit", "peryear (where we'll need to define these per year (targetYear != All).
   --33 - inheritSource = db.ReferenceProperty(Dataset, verbose_name="Inheriting-From Dataset", collection_name='sourcesThatInherit')  #TODO: [e] Inherit dataset. Is this nullable, or should it be the parent dataset as default? See https://developers.google.com/appengine/articles/modeling
   --34 - #fileSource = file #TODO: [d] Ideally, keep data with the dataset. Thus export of dataset = 'for each dataset source, save to file'. See https://developers.google.com/appengine/docs/python/blobstore/blobinfoclass
   --35 - #TODO: [c] A DatasetSource can only inherit from EITHER inheritSource OR fileSource. Filesource should take priority. When either is changed, entity should be verified.
   --36 - targetYear = db.DateTimeProperty() #TODO: [e] target
   --37 - sourceYear = db.DateTimeProperty() #TODO: [e] Usually empty, but exists so that you can inherit Y7 data at start of Y8.
   --47 - #TODO: [e] headteacher (staff or string), postcode, address (long string for now), urn, schooltype, ofstedinspections{date, judgement pairs), nextearliestinspection.
   --48 - urn = db.IntegerProperty(default=0) #TODO: [e] School URN may need to be different number type (Int long enough?).
   --50 - localAuthorityNumber  = db.IntegerProperty(required = False) #TODO: Split this from the LA string returned (split(val, " ")(0) = Number, (1) = Name)
   --57 - ageRange = db.StringProperty(default='Empty') #TODO: [i] Break this down into min age and max age.
   --58 - gender = db.StringProperty(default='Empty') # TODO: Build validation check. If gender is Boys or Girls, and has Girls or Boys respectively, throw error.
   --72 - #TODO: [e] Exclude libraries from tests.
   --73 - #TODO: [c] Move School_Test to tests folder
   --87 - #self.modelExpectedUsingDefaults = Student(name='Empty School Name', description='Empty School Description.', urn=0) #TODO: Test against defaults [test].
   --115 - #TODO: [e] add attendance, classes (arr)
   --116 - #TODO: [e] add summary assessment values for proof.
   --117 - #TODO: [d] add proper assessment.
   --118 - #TODO: [d] add other attendance values.
   --125 - #TODO: [e] add classes (arr).
   --126 - #TODO: [i] add manualSubjects (arr)? How do we account for non-specialists? If teaching, it is not necessarily their subject. Need separate subject profile for each staff member (e.g. Teacher Departments).
   --132 - ownerUserID = db.StringProperty(default='') #TODO: [d] Check this one. See GApps Reference.
   --144 - #TODO: [i] NEXT STEP: How to put in the school? What is the key for? How to retrieve?
  external_sources.py
   --18 - #TODO: [d] See http://www.ehow.co.uk/how_8521125_use-html5lib-python.html
   --31 - #TODO: [c] Use edubase scrape functions as start point.
  fragmentrequester.py
   --75 - #TODO: [e] The whole of this if branch needs moving out into a separate object handler - ideally, we should be able to get the type of handler required from the handlerName (or passed as other argument).
   --82 - #p.drawImage('dog.jpg', 150, 400) #TODO: [d] This is how you return an image dynamically. See reportlab documentation.
   --98 - #TODO: [e] Add test of object *returned by handler function*, in order to return it using the right methods of self.response().
   --108 - logging.info(self.request.path) #TODO: This returns the path requested, so might be a better way of handling this [refactor].
   --115 - #TODO: [e] Only works if returning a string.
  index.html
   --6 - <link rel="apple-touch-icon-precomposed" href="apple-touch-icon-144x144-precomposed.png"> <!-- #TODO: [d] Icon for iOS devices. Equivalent to favicon on mobile, kinda. See http://mathiasbynens.be/notes/touch-icons  -->
   --56 - {{ app_title }} <!-- #TODO: [e] add floating, so top menu is horizontally aligned. -->
   --69 - <li id="global-login_logout"><a href="#"> {{ url_linktext }} </a></li> <!-- #TODO: [d] <i class="icon-info-sign"></i> Icon for linktext should be dependent on action required -->
   --80 - <div class="span3" id="mainnavwrapper"> <!-- #TODO: [e] add padding-left *before* menu, so it has some breathing room -->
   --138 - <div id="developerlinks"> <!-- #TODO: [d] Hide in live mode -->
  mailhandler.py
   --9 - #TODO: [c] Amend code here [refactor].
  main.py
   --29 - relimport_demo() #TODO: [e] Use this pattern to refactor project.
   --56 - guestbook_key(guestbook_name)).order('-date') #TODO: [i] Remove.
   --57 - greetings = greetings_query.fetch(10) #TODO: [i] Remove.
   --93 - #TODO: [c] Here, get user access rights (currently adding admin rights to all logged in users) from a group in datastore. Most likely move whole function to auth library.
   --120 - #TODO: [e] Move these to separate python file (mainnavigation.py). Pass user object, and get string with whole nav menu.
   --125 - <li class=\"primarynav\" id=\"admin-datasetexplorer\">  <a href=\"#\">Dataset Explorer</a></li> <!-- #TODO: [e] Visual view of datasets. Add datasets from here (including descriptive only datasets). Consider using http://timeline.verite.co/  -->
   --242 - class Guestbook(webapp2.RequestHandler): #TODO: [i] Remove.
   --278 - System = EdSystem  #TODO: [i] Consider which aspects of this file need moving to the system object.
   --281 - def main():  #TODO: [i] This is not being called - mainpage is doing all this, handled by the routing. Look at what should be part of this, and remove unnecessary parts [refactor].
  othertodo.py
   --5 - #TODO: [c] Move all nav blocks to auth by user.
   --6 - #TODO: [d] Move auth to separate library, including get user code. Make GAE agnostic, with GAE interface to user in DAL_User library further included in DAL.
   --10 - #TODO: [d] Explore http://demos.kendoui.com/dataviz/scatter-charts/scatter-line.html as alternative to jqPlot.
   --11 - #TODO: [i] Make sure all renderings have accessible alternatives (e.g. JS rendered as per http://jspro.com/raw-javascript/javascript-accessibility-101/). Optional parameter to analysis.render() call could be accessibilty=text, where default = false. If true, text alternatives rendered alongside.
   --12 - #TODO: [d] Explore processing.js as alternative to jqPlot.
   --13 - #TODO: [e] Move rendering of charts and analysis to separate Python classes and file. NOT edu objects!
   --14 - #TODO: [i] Use NC (National Strategy?) colours! E.g. if rendering English, use Yellow. Means that matches user expectations.
   --18 - #TODO: [d] Add distribute to email (requires email property on staff).
   --19 - #TODO: [i] Add non-staff distribution contacts (both inherit from superclass or use aggregation).
   --20 - #TODO: [d] Add single PDF output - where items for same person are in order, with either (a) footer identifying who it is for, or (b) coversheet with list of pages and who it is for.
   --23 - #TODO: [d] Get tutor group members (iterate through staff and students). Probably one to cache at System or collection level?
   --31 - #TODO: [i] Map to image map http://www.algonet.se/~ug/html+pycgi/img.html
  system.py
   --12 - #TODO: [e] Check status of unit test strut here?
   --14 - self.version = "alpha" #TODO: [d] Get version number here.
   --15 - #TODO: [e] On process dataset, update calculationVersion of the Dataset. If calculationVersion != edsystem.version, then recalc dataset?
   --16 - self.githublink = "" #TODO: [i] Necessary?
   --17 - self.passedUnitTests = False #TODO: [e] Get most recent unit test outcomes (from dev_unittestoutcomes() ).
   --49 - #TODO: [c] Add owner, referenceURI, prerequisites[], (more next lines-->)
   --73 - #TODO: [e] Prerequisite metrics.
  codeanalysis.py
   --2 - # TODO: [d] see page 8 of python data vis.
   --3 - # TODO: [e] Write file size metrics.
   --4 - # TODO: [e] Write file created metrics.
   --5 - # TODO: [e] Write file updated metrics.
   --6 - # TODO: [d] Write class count metrics.
   --7 - # TODO: [d] Write function count metrics.
   --8 - # TODO: [d] Write class list of file.
   --9 - # TODO: [d] Write function list of file.
   --10 - # TODO: [e] match unit test files to class files, and count tests. also get functions/properties without tests.
   --11 - # TODO: [i] Get functions/classes that do not have docstrings.
   --12 - # TODO: [i] Assume idealistic if no tag.
   --13 - # TODO: [e] objects...is it easiest to import each file, then use dir() on the module? see p. 99)
   --14 - # TODO: [d] Check for 'conflicted copy' in title of file, and write as a system level bug with list of conflicted versions. [i] Get a diff of changes.
   --15 - # TODO: [d] Include results of unit tests (perhaps last unit test run outputs a text file and this reads that, rather than run unit test suite?).
   --16 - # TODO: [i] Use http://docs.python.org/library/timeit.html#module-timeit to time how long unit tests take/how long it takes to import modules.
   --32 - COMPUTERSTAMP = socket.gethostname() #os.environ['COMPUTERNAME'] #TODO: [i]Check against http://stackoverflow.com/questions/799767/getting-name-of-windows-computer-running-python-script if doesn't work across systems.
   --33 - LOCATIONSTAMP = "" #TODO: [i] Add location stamp (using what library?).
   --89 - #TODO: [i] Add exception here for sLine that doesn't meet LoC matching pattern. What about docstrings, as currently flagged as code?
   --217 - #(22) No importance level: [blank] #TODO: [d] In list, this goes above idealistic. May need regex for [<any characters>] pattern.
   --219 - #(24) Other tagging: [other] #TODO: [d] append tag to list of additional tags. Means can get a list of specific todo related to (unittests), for example.
   --321 - print (" TODO Items:           " + str(todoCount))
   --327 - #TODO: [i] For each 'other' tag item, print count?
   --331 - #TODO: [d] Display other tag list.
   --336 - print (" TODO ITEMS as of " + str(DATESTAMP))
   --338 - #if line.strip()[0:2] == "..": #TODO: [d] change to option of true/false of showing only file and not path breaks this.
   --341 - print (line), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
   --348 - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished [notrack].
   --354 - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished [notrack].
   --360 - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
   --366 - print (lineB), #TODO: [i] Replace these with stdout calls. print(string), <-- with trailing comma just smells bad to me. Makes it look unfinished.
   --374 - #TODO: [d]Check against http://stackoverflow.com/questions/2666863/list-to-csv-in-python
   --399 - Switch for iterating through types of TODO items. [notrack]
   --443 - #TODO: [i] Open HTML page, and/or export to PDF.
   --475 - #HACK: [i] This works, but it means that we can't see where the TODO came from.
   --487 - #TODO: [d] Remove all these debug strings.
   --544 - #TODO: [i] I only needed to duplicate handleResults because it wasn't broken down enough. Refactor these.
   --643 - #TODO: [i] Use jqPlot (or current js render library) to plot line comparison of LoC and TODO items.
   --643 - #TODO: [i] Use jqPlot (or current js render library) to plot line comparison of LoC and TODO items.
   --722 - #TODO: Change the path addition to only append if not already in path?
   --744 - fileIgnoreList = ["codeanalysis.html"] #TODO: ignore imported non-project files (Add at later date. This file should be done fairly early in project (before lit review finished)).
   --791 - #TODO: [e]Write to PDF.
   --800 - # TODO: [d] should build this function into a unit test suite. every time we do a full check, we also log code review.
   --802 - # TODO: [i] if new metrics added, update previous rows? Impossible?
  ukssda.css
   --11 - #globalnav li  { font-size:1.2em; float:left; list-style-type:none; padding-left:15px;} /* TODO: [e] [mobile] On mobile layout, no 'float:left;' */
  gendata.py
   --4 - #TODO: [e]Replace these strings with values loaded from textfiles on module start (system object? onload of admin console, load these to system.object).
   --9 - #TODO: [e] Currently returns first item.
  formfiller.py
   --122 - pass # TODO: part of "option without value= attribute" processing
  htmlserializer.py
   --230 - #TODO: Add namespace support here
  test_sanitizer.py
   --29 - continue ### TODO
   --31 - continue ### TODO
   --56 - if attribute_name != attribute_name.lower(): continue ### TODO
  test_tokenizer.py
   --85 - # TODO: convert tests to reflect arrays
  test_treewalkers.py
   --199 - #TODO: Remove this if statement, attrs should always exist
   --235 - pass # TODO: what to do with errors?
  _base.py
   --20 - #TODO: treewalkers should always have attrs
  aboutme.html
   --27 - <!-- #TODO: [i] Also see http://careers.stackoverflow.com/uk/cv/edit/16289 -->
  precommit.py
   --3 - #TODO: [e] Run codeanalysis.
   --4 - #TODO: [i] Probably move codeanalysis in here.
  predeploy.py
   --5 - #TODO: [c] Load test strut and check unit tests.
   --6 - #TODO: [c] If tests fail, do not deploy (if you really want to deploy with a failed test (bad, bad practice), can use the GAE Launcher instead.
   --7 - #TODO: [i] Make change to app.yaml?
   --8 - #TODO: [c] Change to deploy, and add line to deploy using dataforschools admin email account.
   --9 - #TODO: [e] Run code analysis.
   --10 - #TODO: [i] Make change to app.yaml?
   --11 - #TODO: [d] Make local backup.
   --13 - #TODO: [e] Do not deploy if critical items exist (once past initial development).
   --15 - #TODO: [i] Explore some performance testing. Possible to use http://jspro.com/apis/profiling-page-loads-with-the-navigation-timing-api/ OR http://jspro.com/apis/discovering-the-high-resolution-time-api/ ? Would need to do postdeploy, probably.
